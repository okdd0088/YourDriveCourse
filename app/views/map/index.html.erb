<div id="map" class="map">
</div>

<style type="text/css">
  .map {
    height: 500px;
    width:100%;
  }
  
  .results {
    background-color: white;
    opacity: 0.8;
    position: absolute;
    top: 12px;
    right: 12px;
    width: 320px;
    height: 480px;
    overflow-y: scroll;
  }
</style>

<script type="text/javascript">

  var map = L.map('map', { scrollWheelZoom: false }),
    waypoints = [
      L.latLng(35.49314371541488, 133.0642004015681),
      L.latLng(35.48724545222788, 133.0605010983709)
    ];

  L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  let DefaultIcon = L.icon({
    iconUrl: "<%= asset_pack_path 'media/images/marker-icon.png' %>",
    iconRetinaUrl: "<%= asset_pack_path 'media/images/marker-icon-2x.png' %>",
    shadowUrl: "<%= asset_pack_path 'media/images/marker-shadow.png' %>",
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    tooltipAnchor: [16, -28],
    shadowSize: [41, 41]
  });
  L.Marker.prototype.options.icon = DefaultIcon;

  var control = L.Routing.control({
      plan: L.Routing.plan(waypoints, {
        createMarker: function(i, wp) {
          return L.marker(wp.latLng, {
            draggable: true,
          });
        },
        geocoder: L.Control.Geocoder.nominatim(),
        routeWhileDragging: true
      }),
      routeWhileDragging: true,
      routeDragTimeout: 250,
      showAlternatives: true,
      altLineOptions: {
        styles: [
          {color: 'black', opacity: 0.15, weight: 9},
          {color: 'white', opacity: 0.8, weight: 6},
          {color: 'blue', opacity: 0.5, weight: 2}
        ]
      }
    })
    .addTo(map)
    .on('routingerror', function(e) {
      try {
        map.getCenter();
      } catch (e) {
        map.fitBounds(L.latLngBounds(waypoints));
      }

      handleError(e);
    });

  L.Routing.errorControl(control).addTo(map);

  function createButton(label, container) {
    var btn = L.DomUtil.create('button', '', container);
    btn.setAttribute('type', 'button');
    btn.innerHTML = label;
    return btn;
  }

  function dpLatLon() {
    var routeArray = new Array();
    routeArray = control.getWaypoints();
    routeArray.forEach((element,index) => {
      console.log(`${index}: ${element.latLng.lat}`);
      console.log(`${index}: ${element.latLng.lng}`);
    });
    console.log("end")
  }

  map.on('click', function(e) {
    var container = L.DomUtil.create('div'),
      startBtn = createButton('Start from this location', container),
      destBtn = createButton('Go to this location', container);

    L.DomEvent.on(startBtn, 'click', function() {
      control.spliceWaypoints(0, 1, e.latlng);
      map.closePopup();
    });

    L.DomEvent.on(destBtn, 'click', function() {
      control.spliceWaypoints(control.getWaypoints().length - 1, 1, e.latlng);
      map.closePopup();
    });
  

    L.popup()
      .setContent(container)
      .setLatLng(e.latlng)
      .openOn(map);
  });

  control.on('routingstart',function(e){
    dpLatLon();
  });

  

  // <% @courses.each do |c| %>
  //   L.Routing.control({
  //     waypoints: [
  //       L.latLng(<%= c.departure_lat %>, <%= c.departure_lon %>),
  //         <% c.waypoints.each do |wp| %>
  //           L.latLng(<%= wp.lat %>, <%= wp.lon %>),
  //         <% end %>
  //       L.latLng(<%= c.arrival_lat %>, <%= c.arrival_lon %>)
  //     ]
  //   }).addTo(map);
  // <% end %>
  
</script>
